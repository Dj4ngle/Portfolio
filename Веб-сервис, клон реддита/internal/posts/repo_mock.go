// Code generated by MockGen. DO NOT EDIT.
// Source: posts.go

// Package posts is a generated GoMock package.
package posts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// DeleteComment mocks base method.
func (m *MockPostRepo) DeleteComment(postID, commentID primitive.ObjectID, userID int64) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepoMockRecorder) DeleteComment(postID, commentID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepo)(nil).DeleteComment), postID, commentID, userID)
}

// DeletePost mocks base method.
func (m *MockPostRepo) DeletePost(postID primitive.ObjectID, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepoMockRecorder) DeletePost(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepo)(nil).DeletePost), postID, userID)
}

// GetPost mocks base method.
func (m *MockPostRepo) GetPost(postID primitive.ObjectID) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", postID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostRepoMockRecorder) GetPost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostRepo)(nil).GetPost), postID)
}

// GetPosts mocks base method.
func (m *MockPostRepo) GetPosts(filter func(*Post) bool) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", filter)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostRepoMockRecorder) GetPosts(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostRepo)(nil).GetPosts), filter)
}

// MakeComment mocks base method.
func (m *MockPostRepo) MakeComment(postID primitive.ObjectID, comment, username string, userID int64) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeComment", postID, comment, username, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeComment indicates an expected call of MakeComment.
func (mr *MockPostRepoMockRecorder) MakeComment(postID, comment, username, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeComment", reflect.TypeOf((*MockPostRepo)(nil).MakeComment), postID, comment, username, userID)
}

// MakePost mocks base method.
func (m *MockPostRepo) MakePost(newPost *PostForm, username string, userID int64) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePost", newPost, username, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePost indicates an expected call of MakePost.
func (mr *MockPostRepoMockRecorder) MakePost(newPost, username, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePost", reflect.TypeOf((*MockPostRepo)(nil).MakePost), newPost, username, userID)
}

// UnVotePost mocks base method.
func (m *MockPostRepo) UnVotePost(postID primitive.ObjectID, user int64) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVotePost", postID, user)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVotePost indicates an expected call of UnVotePost.
func (mr *MockPostRepoMockRecorder) UnVotePost(postID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVotePost", reflect.TypeOf((*MockPostRepo)(nil).UnVotePost), postID, user)
}

// VotePost mocks base method.
func (m *MockPostRepo) VotePost(postID primitive.ObjectID, user int64, voteVal int) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotePost", postID, user, voteVal)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotePost indicates an expected call of VotePost.
func (mr *MockPostRepoMockRecorder) VotePost(postID, user, voteVal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotePost", reflect.TypeOf((*MockPostRepo)(nil).VotePost), postID, user, voteVal)
}
